---
# This is a basic GitHub Actions pipeline to validate Terraform
name: Databricks Infrastructure Plan
permissions:
  id-token: write
  issues: write
  contents: read
  pull-requests: write
on:
  push:
    branches: [ main ]
    paths:
      - "azure/**"
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]
    paths:
      - "azure/**"
defaults:
  run:
    working-directory: azure
env:
  ARM_CLIENT_ID: ${{ vars.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_AD_TENANT_ID }}
  BACKEND_RG_NAME: ${{ vars.BACKEND_RG_NAME }}
  BACKEND_SA_NAME: ${{ vars.BACKEND_SA_NAME }}
  BACKEND_CONTAINER_NAME: ${{ vars.BACKEND_CONTAINER_NAME }}
  BACKEND_KEY: ${{ vars.BACKEND_KEY }}
  TERRAFORM_VERSION: 1.4.6
jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: self-hosted
    environment: prod
    env:
      TF_VAR_location: ${{ vars.TF_VAR_LOCATION }}
      TF_VAR_spoke_config: ${{ vars.TF_VAR_SPOKE_CONFIG }}
      TF_VAR_hub_resource_suffix: ${{ vars.TF_VAR_HUB_RESOURCE_SUFFIX }}
      TF_VAR_dr: ${{ vars.TF_VAR_DR }}
      TF_VAR_spoke_suffix: ${{ vars.TF_VAR_SPOKE_SUFFIX }}
      TF_VAR_spoke_tag: ${{ vars.TF_VAR_SPOKE_TAG }}

    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: $TERRAFORM_VERSION
          terraform_wrapper: false
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt -check
      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=$BACKEND_RG_NAME" \
          -backend-config="storage_account_name=$BACKEND_SA_NAME" \
          -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
          -backend-config="key=$BACKEND_KEY"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v6.1.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1